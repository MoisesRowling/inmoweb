/**
 * @fileoverview Firestore Security Rules for the investment platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where users can only
 * access their own data. Public read access is granted to the 'properties' collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user.
 * - /properties/{propertyId}: Stores property details, publicly readable.
 * - /users/{userId}/investments/{investmentId}: Stores user's investment data, accessible only by the user.
 * - /users/{userId}/transactions/{transactionId}: Stores user's transactions, accessible only by the user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Properties are publicly readable but not writable through the client.
 * - Users can only manage their own investments and transactions.
 * - No listing of all users is allowed.
 *
 * Denormalization for Authorization:
 * - User-specific data (investments, transactions) are stored under the /users/{userId} path to easily enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user document.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with matching {userId} can perform these operations.
     * @deny (get, create, update, delete) User with non-matching {userId} cannot perform these operations.
     * @principle Enforces document ownership for all operations on user documents.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // No listing of all users.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read property documents. Write operations are denied through the client.
     * @path /properties/{propertyId}
     * @allow (get, list) Anyone can read property data.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Allows public read access for properties.
     */
    match /properties/{propertyId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to manage their own investments.
     * @path /users/{userId}/investments/{investmentId}
     * @allow (get, list, create, update, delete) User with matching {userId} can perform these operations.
     * @deny (get, list, create, update, delete) User with non-matching {userId} cannot perform these operations.
     * @principle Enforces user-ownership for investments.
     */
    match /users/{userId}/investments/{investmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (get, list, create, update, delete) User with matching {userId} can perform these operations.
     * @deny (get, list, create, update, delete) User with non-matching {userId} cannot perform these operations.
     * @principle Enforces user-ownership for transactions.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}