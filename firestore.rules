rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) Attacker cannot create a profile with someone else's ID.
     * @deny (update) Attacker cannot modify another user's profile.
     * @deny (delete) Attacker cannot delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
      }

      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Controls access to property documents. Properties are publicly readable, but write access is restricted.
     * @path /properties/{propertyId}
     * @allow (get) Any user can read property details.
     * @allow (list) Any user can list properties.
     * @deny (create) No one can create property documents (admin role not yet implemented).
     * @deny (update) No one can update property documents (admin role not yet implemented).
     * @deny (delete) No one can delete property documents (admin role not yet implemented).
     * @principle Allows public read access but restricts write access.
     */
    match /properties/{propertyId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to investment documents within a user's subcollection.
     * @path /users/{userId}/investments/{investmentId}
     * @allow (get) Authenticated user can read their own investment data.
     * @allow (create) Authenticated user can create investment data under their own user ID.
     * @allow (update) Authenticated user can update investment data under their own user ID.
     * @allow (delete) Authenticated user can delete their own user ID.
     * @deny (get) Authenticated user cannot read another user's investment data.
     * @deny (create) User cannot create investment data under another user's ID.
     * @deny (update) User cannot modify another user's investment data.
     * @deny (delete) User cannot delete another user's investment data.
     * @principle Restricts access to a user's own investment data tree.
     */
    match /users/{userId}/investments/{investmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
      }

      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Controls access to transaction documents within a user's subcollection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (get) Authenticated user can read their own transaction history.
     * @allow (create) Authenticated user can create transaction data under their own user ID.
     * @allow (update) Authenticated user can update transaction data under their own user ID.
     * @allow (delete) Authenticated user can delete their own user ID.
     * @deny (get) Authenticated user cannot read another user's transaction history.
     * @deny (create) User cannot create transaction data under another user's ID.
     * @deny (update) User cannot modify another user's transaction data.
     * @deny (delete) User cannot delete another user's transaction data.
     * @principle Restricts access to a user's own transaction data tree.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
      }

      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }
  }
}