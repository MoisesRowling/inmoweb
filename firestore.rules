/**
 * @fileoverview Firestore Security Rules for the investment platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (profiles, account balances, investments, transactions). Properties are publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /users/{userId}/account_balance/{accountBalanceId}: Account balances, accessible only by the user. accountBalanceId is equal to userId.
 * - /users/{userId}/investments/{investmentId}: Investment data, accessible only by the user.
 * - /users/{userId}/transactions/{transactionId}: Transaction history, accessible only by the user.
 * - /properties/{propertyId}: Property information, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Property data is publicly readable but cannot be created, updated, or deleted through the client.
 *
 * Denormalization for Authorization:
 *  N/A - current rules do not use denormalization.
 * Structural Segregation:
 * Uses separate collections for private user data and public property data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects all documents.
     * @path /
     * @allow (get) - Public get is allowed.
     * @deny (create) - Public creation is not allowed.
     * @principle Root level access is restricted.
     */
    match /{document=**} {
      allow get: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to read and write their own user profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile.
     *   request.auth.uid == 'user123'
     *   request.resource.data.id == 'user123'
     * @allow (get) - User with UID 'user123' can read their profile.
     *   request.auth.uid == 'user123'
     * @allow (update) - User with UID 'user123' can update their profile.
     *   request.auth.uid == 'user123'
     *   resource.data.id == 'user123'
     * @allow (delete) - User with UID 'user123' can delete their profile.
     *   request.auth.uid == 'user123'
     *   resource.data.id == 'user123'
     * @deny (create) - User with UID 'user456' cannot create a profile for 'user123'.
     *   request.auth.uid == 'user456'
     *   request.resource.data.id == 'user123'
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSelfCreation(userId);
      allow update: if isExistingOwner(userId) && isUserIdNotChanged(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own account balance.
     * @path /users/{userId}/account_balance/{accountBalanceId}
     * @allow (create) - User with UID 'user123' can create their account balance entry.
     *   request.auth.uid == 'user123'
     *   request.resource.data.userId == 'user123'
     *   accountBalanceId == 'user123'
     * @allow (get) - User with UID 'user123' can read their account balance.
     *   request.auth.uid == 'user123'
     *   accountBalanceId == 'user123'
     * @allow (update) - User with UID 'user123' can update their account balance.
     *   request.auth.uid == 'user123'
     *   accountBalanceId == 'user123'
     *   resource.data.userId == 'user123'
     * @allow (delete) - User with UID 'user123' can delete their account balance entry.
     *   request.auth.uid == 'user123'
     *   accountBalanceId == 'user123'
     *   resource.data.userId == 'user123'
     * @deny (create) - User with UID 'user456' cannot create an account balance entry for 'user123'.
     *   request.auth.uid == 'user456'
     *   request.resource.data.userId == 'user123'
     *   accountBalanceId == 'user123'
     * @principle Restricts access to a user's account balance to only that user.
     */
    match /users/{userId}/account_balance/{accountBalanceId} {
      allow get: if isOwner(userId) && isAccountBalanceIdMatchesUserId(userId, accountBalanceId);
      allow list: if false;
      allow create: if isSelfCreation(userId) && isAccountBalanceIdMatchesUserId(userId, accountBalanceId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && isAccountBalanceIdMatchesUserId(userId, accountBalanceId) && isUserIdNotChanged(userId);
      allow delete: if isExistingOwner(userId) && isAccountBalanceIdMatchesUserId(userId, accountBalanceId);
    }

    /**
     * @description Allows users to manage their own investment data.
     * @path /users/{userId}/investments/{investmentId}
     * @allow (create) - User with UID 'user123' can create their investment data.
     *   request.auth.uid == 'user123'
     *   request.resource.data.userId == 'user123'
     * @allow (get) - User with UID 'user123' can read their investment data.
     *   request.auth.uid == 'user123'
     * @allow (update) - User with UID 'user123' can update their investment data.
     *   request.auth.uid == 'user123'
     *   resource.data.userId == 'user123'
     * @allow (delete) - User with UID 'user123' can delete their investment data.
     *   request.auth.uid == 'user123'
     *   resource.data.userId == 'user123'
     * @deny (create) - User with UID 'user456' cannot create investment data for 'user123'.
     *   request.auth.uid == 'user456'
     *   request.resource.data.userId == 'user123'
     * @principle Restricts access to a user's investments to only that user.
     */
    match /users/{userId}/investments/{investmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && isUserIdNotChanged(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own transaction history.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - User with UID 'user123' can create their transaction data.
     *   request.auth.uid == 'user123'
     *   request.resource.data.userId == 'user123'
     * @allow (get) - User with UID 'user123' can read their transaction data.
     *   request.auth.uid == 'user123'
     * @allow (list) - User with UID 'user123' can list their transactions.
     *   request.auth.uid == 'user123'
     * @allow (update) - User with UID 'user123' can update their transaction data.
     *   request.auth.uid == 'user123'
     *   resource.data.userId == 'user123'
     * @allow (delete) - User with UID 'user123' can delete their transaction data.
     *   request.auth.uid == 'user123'
     *   resource.data.userId == 'user123'
     * @deny (create) - User with UID 'user456' cannot create transaction data for 'user123'.
     *   request.auth.uid == 'user456'
     *   request.resource.data.userId == 'user123'
     * @principle Restricts access to a user's transactions to only that user.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && isUserIdNotChanged(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read property information, but restricts write access.
     * @path /properties/{propertyId}
     * @allow (get) - Any user can read property information.
     * @allow (list) - Any user can list property information.
     * @deny (create) - No one can create property information through the client.
     * @deny (update) - No one can update property information through the client.
     * @deny (delete) - No one can delete property information through the client.
     * @principle Grants public read access to properties while restricting write access.
     */
    match /properties/{propertyId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is attempting to create their own user document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is creating their own document, false otherwise.
     */
    function isSelfCreation(userId) {
      return isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
    }

      /**
       * @description Helper function to validate the accountBalanceId and userId are the same.
       * @param {string} userId The user's ID.
       * @param {string} accountBalanceId The account balance ID.
       * @return {boolean} True if the IDs match.
       */
    function isAccountBalanceIdMatchesUserId(userId, accountBalanceId) {
        return userId == accountBalanceId;
    }

    /**
     * @description Prevents the user ID from being changed after creation.
     * @param {string} userId The user ID.
     * @return {boolean} True if the user ID is not being changed, false otherwise.
     */
    function isUserIdNotChanged(userId) {
        return resource.data.userId == userId;
    }
  }
}