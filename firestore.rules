/**
 * @fileoverview Firestore Security Rules for Investment Platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, account balances, investments, and transactions.
 * Properties are publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /users/{userId}/account_balance/{accountBalanceId}: User's account balance.  accountBalanceId should be the same as userId.
 * - /users/{userId}/investments/{investmentId}: User's investment data.
 * - /users/{userId}/transactions/{transactionId}: User's transaction history.
 * - /properties/{propertyId}: Property information.
 *
 * Key Security Decisions:
 * - Users can only access their own profile and related data (account balance, investments, transactions).
 * - Properties are publicly readable, but only writeable by an admin (not implemented here).
 * - User listing is disallowed to prevent data scraping.
 *
 * Denormalization for Authorization:
 *  - The `User`, `AccountBalance`, `Investment`, and `Transaction` entities include a `userId` field.  The rules validate that this field matches the `userId` in the path to ensure ownership and prevent unauthorized data access.  For `account_balance` the rule also ensures that the document id is the same as the user id.
 *
 * Structural Segregation:
 * - User-specific data is stored under the `/users/{userId}` path, ensuring private access.  Public property data is stored in the top-level `/properties` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile.
     * @path /users/{userId}
     * @allow (create) User with ID "user123" can create their profile.
     *   - request.auth.uid: "user123"
     *   - request.resource.data.id: "user123"
     * @allow (get) User with ID "user123" can read their profile.
     *   - request.auth.uid: "user123"
     * @allow (update) User with ID "user123" can update their profile.
     *   - request.auth.uid: "user123"
     * @deny (create) User with ID "user123" cannot create profile for "otherUser".
     *   - request.auth.uid: "user123"
     *   - request.resource.data.id: "otherUser"
     * @deny (get) User with ID "user456" cannot read the profile of user "user123".
     *   - request.auth.uid: "user456"
     * @deny (update) User with ID "user456" cannot update the profile of user "user123".
     *   - request.auth.uid: "user456"
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own account balance.
     * @path /users/{userId}/account_balance/{accountBalanceId}
     * @allow (create) User with ID "user123" can create their account balance.
     *   - request.auth.uid: "user123"
     *   - request.resource.data.userId: "user123"
     *   - accountBalanceId: "user123"
     * @allow (get) User with ID "user123" can read their account balance.
     *   - request.auth.uid: "user123"
     *   - accountBalanceId: "user123"
     * @allow (update) User with ID "user123" can update their account balance.
     *   - request.auth.uid: "user123"
     *   - accountBalanceId: "user123"
     * @deny (create) User with ID "user123" cannot create account balance for "otherUser".
     *   - request.auth.uid: "user123"
     *   - request.resource.data.userId: "otherUser"
     *   - accountBalanceId: "otherUser"
     * @deny (get) User with ID "user456" cannot read the account balance of user "user123".
     *   - request.auth.uid: "user456"
     *   - accountBalanceId: "user123"
     * @deny (update) User with ID "user456" cannot update the account balance of user "user123".
     *   - request.auth.uid: "user456"
     *   - accountBalanceId: "user123"
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/account_balance/{accountBalanceId} {
      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId) && accountBalanceId == userId;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && accountBalanceId == userId;
      allow update: if isExistingOwner(userId) && accountBalanceId == userId;
      allow delete: if isExistingOwner(userId) && accountBalanceId == userId;
    }

    /**
     * @description Allows users to read and write their own investment data.
     * @path /users/{userId}/investments/{investmentId}
     * @allow (create) User with ID "user123" can create investment data.
     *   - request.auth.uid: "user123"
     *   - request.resource.data.userId: "user123"
     * @allow (get) User with ID "user123" can read their investment data.
     *   - request.auth.uid: "user123"
     * @allow (update) User with ID "user123" can update their investment data.
     *   - request.auth.uid: "user123"
     * @deny (create) User with ID "user123" cannot create investment data for "otherUser".
     *   - request.auth.uid: "user123"
     *   - request.resource.data.userId: "otherUser"
     * @deny (get) User with ID "user456" cannot read the investment data of user "user123".
     *   - request.auth.uid: "user456"
     * @deny (update) User with ID "user456" cannot update the investment data of user "user123".
     *   - request.auth.uid: "user456"
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/investments/{investmentId} {
      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own transaction history.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User with ID "user123" can create transaction history.
     *   - request.auth.uid: "user123"
     *   - request.resource.data.userId: "user123"
     * @allow (get) User with ID "user123" can read their transaction history.
     *   - request.auth.uid: "user123"
     * @allow (update) User with ID "user123" can update their transaction history.
     *   - request.auth.uid: "user123"
     * @deny (create) User with ID "user123" cannot create transaction history for "otherUser".
     *   - request.auth.uid: "user123"
     *   - request.resource.data.userId: "otherUser"
     * @deny (get) User with ID "user456" cannot read the transaction history of user "user123".
     *   - request.auth.uid: "user456"
     * @deny (update) User with ID "user456" cannot update the transaction history of user "user123".
     *   - request.auth.uid: "user456"
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/transactions/{transactionId} {
      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read property information, but only allows authorized users to write (not implemented).
     * @path /properties/{propertyId}
     * @allow (get) Anyone can read property information.
     * @allow (list) Anyone can list property information.
     * @deny (create) No one can create a property without authorization logic (not implemented).
     * @deny (update) No one can update a property without authorization logic (not implemented).
     * @deny (delete) No one can delete a property without authorization logic (not implemented).
     * @principle Public read access with restricted writes.
     */
    match /properties/{propertyId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin-only validation
      allow update: if false; // TODO: Add admin-only validation
      allow delete: if false; // TODO: Add admin-only validation
    }
  }
}