/**
 * @fileoverview Firestore Security Rules for the investment platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, investments, and transactions, ensuring that users can only access their own data. Public read access is granted to properties.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with the document ID matching the Firebase Auth UID.
 * - /users/{userId}/investments/{investmentId}: Stores investment data for each user, nested under their profile.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction history for each user, nested under their profile.
 * - /properties/{propertyId}: Stores information about properties available for investment, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - Properties are publicly readable but only modifiable by an admin (not yet implemented).
 * - All user-related data (investments, transactions) is strictly owner-only.
 *
 * Denormalization for Authorization:
 * - User-specific data (investments, transactions) is stored under the user's document to simplify ownership checks using the `isOwner(userId)` function.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their profile.
     * @allow (get, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - If the authenticated user ID does not match the user id in the path
     * @deny (get, update, delete) - If the authenticated user ID does not match the user id in the path
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get, update, delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow list: if false;
    }

    /**
     * @description Controls access to investment documents under a specific user.
     * @path /users/{userId}/investments/{investmentId}
     * @allow (create, get, list, update, delete) - Authenticated user can only access their own investments.
     * @deny (create, get, list, update, delete) - If the authenticated user ID does not match the user id in the path
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/investments/{investmentId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

        function isSignedIn() {
            return request.auth != null;
        }
        allow create: if isSignedIn() && isOwner(userId);
        allow get, list: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to transaction documents under a specific user.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create, get, list, update, delete) - Authenticated user can only access their own transactions.
     * @deny (create, get, list, update, delete) - If the authenticated user ID does not match the user id in the path
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to property documents.
     * @path /properties/{propertyId}
     * @allow (get, list) - Any user can read the properties.
     * @deny (create, update, delete) - No user can modify properties (admin only, not yet implemented).
     * @principle Allows public read access but restricts write access to administrators.
     */
    match /properties/{propertyId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check for write access
    }
  }
}