/**
 * @fileoverview Firestore Security Rules for the investment platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (profile, investments, transactions) and provides public read access to property
 * listings. All write operations are protected by authorization checks based on
 * the authenticated user's UID.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with the document ID matching the
 *   Firebase Auth UID.
 * - /users/{userId}/investments/{investmentId}: Stores investment data for each
 *   user, nested under their user document.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction history for
 *   each user, nested under their user document.
 * - /properties/{propertyId}: Stores publicly readable property listing data.
 *
 * Key Security Decisions:
 * - User data is strictly owned and managed by the respective user.
 * - Property listings are publicly readable but can only be created, updated,
 *   or deleted by an admin (currently emulated by owner-only writes).
 * - User listing is disallowed.
 *
 * Denormalization for Authorization:
 * To simplify and optimize security rules, the `userId` is included in the
 * Investment and Transaction documents within the corresponding user's subcollections.
 * This avoids the need for complex queries or `get()` calls to verify ownership.
 *
 * Structural Segregation:
 * Private user data (investments, transactions) is stored in user-specific
 * subcollections, while public property listings are stored in a top-level collection.
 * This segregation simplifies read access control and ensures that listing
 * user-specific data is restricted to the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile document.
     * @allow (get) User with UID 'user123' can read their own profile document.
     * @allow (update) User with UID 'user123' can update their own profile document.
     * @allow (delete) User with UID 'user123' can delete their own profile document.
     * @deny (create) User with UID 'user456' cannot create a profile document for user 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to investment documents for a specific user.
     * @path /users/{userId}/investments/{investmentId}
     * @allow (create) User with UID 'user123' can create an investment document under their profile.
     * @allow (get) User with UID 'user123' can read an investment document under their profile.
     * @allow (update) User with UID 'user123' can update an investment document under their profile.
     * @allow (delete) User with UID 'user123' can delete an investment document under their profile.
     * @deny (create) User with UID 'user456' cannot create an investment document for user 'user123'.
     * @principle Enforces document ownership for all operations on user investments.
     */
    match /users/{userId}/investments/{investmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Controls access to transaction documents for a specific user.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User with UID 'user123' can create a transaction document under their profile.
     * @allow (get) User with UID 'user123' can read a transaction document under their profile.
     * @allow (update) User with UID 'user123' can update a transaction document under their profile.
     * @allow (delete) User with UID 'user123' can delete a transaction document under their profile.
     * @deny (create) User with UID 'user456' cannot create a transaction document for user 'user123'.
     * @principle Enforces document ownership for all operations on user transactions.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Controls access to property listing documents.
     * @path /properties/{propertyId}
     * @allow (get) Any user can read property listing documents.
     * @allow (list) Any user can list property listing documents.
     * @deny (create) Only an admin can create property listing documents. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) Only an admin can update property listing documents. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) Only an admin can delete property listing documents. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access to property listings while restricting writes to owners.
     */
    match /properties/{propertyId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}