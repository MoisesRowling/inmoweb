/**
 * @fileoverview Firestore Security Rules for the investment platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where users can only
 * access and manipulate data associated with their own user ID. Public read
 * access is granted to the 'properties' collection, while all other collections
 * are secured to individual users.
 *
 * Data Structure:
 * - /properties: Publicly readable collection of investment properties.
 * - /investments/{userId}/userInvestments: Investments made by each user,
 *   nested under their respective user ID.
 * - /transactions/{userId}/userTransactions: Financial transactions for each user.
 * - /users/{userId}: User profile information, accessible only by the user.
 *
 * Key Security Decisions:
 * - Users can only list investments and transactions under their own user ID.
 * - Users can create their own user document but can only update/delete it if it exists.
 * - Listing of users is disallowed.
 * - Public read access is granted for the properties collection.
 *
 * Denormalization for Authorization:
 * - The current data structure already includes the userId on Investment and Transaction
 *   documents, allowing for efficient owner-based security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to the 'properties' collection.
     * @path /properties
     * @allow (get, list) Any user can read property data.
     * @deny (create, update, delete) No user can create, update, or delete properties.
     * @principle Public read access with no write access.
     */
    match /properties/{propertyId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for investments. Only the user can
     *  read or write their investment data.
     * @path /investments/{userId}/userInvestments/{investmentId}
     * @allow (get, list) User with ID 'userId' can read their own investments.
     * @allow (create) User with ID 'userId' can create investments under their ID.
     * @allow (update, delete) User with ID 'userId' can update/delete their own investments (if they exist).
     * @deny (get, list) User with ID 'otherUserId' cannot read investments under 'userId'.
     * @deny (create, update, delete) User with ID 'otherUserId' cannot create/update/delete investments under 'userId'.
     * @principle Enforces document ownership for all operations.
     */
    match /investments/{userId}/userInvestments/{investmentId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for transactions. Only the user can
     *  read or write their transaction data.
     * @path /transactions/{userId}/userTransactions/{transactionId}
     * @allow (get, list) User with ID 'userId' can read their own transactions.
     * @allow (create) User with ID 'userId' can create transactions under their ID.
     * @allow (update, delete) User with ID 'userId' can update/delete their own transactions (if they exist).
     * @deny (get, list) User with ID 'otherUserId' cannot read transactions under 'userId'.
     * @deny (create, update, delete) User with ID 'otherUserId' cannot create/update/delete transactions under 'userId'.
     * @principle Enforces document ownership for all operations.
     */
    match /transactions/{userId}/userTransactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user profiles. Only the user can
     *  read or write their profile data. Allows self-creation.
     * @path /users/{userId}
     * @allow (get) User with ID 'userId' can read their own profile.
     * @allow (create) User with ID 'userId' can create their profile if the authenticated user's ID matches.
     * @allow (update, delete) User with ID 'userId' can update/delete their own profile (if it exists).
     * @deny (get) User with ID 'otherUserId' cannot read profile under 'userId'.
     * @deny (create) User with ID 'otherUserId' cannot create a profile for 'userId'.
     * @deny (update, delete) User with ID 'otherUserId' cannot update/delete profile under 'userId'.
     * @principle Enforces document ownership for all operations, allows self-creation.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}