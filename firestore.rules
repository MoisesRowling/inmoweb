rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to investment documents for a specific user.
     * @path /users/{userId}/investments/{investmentId}
     * @allow (get) User with ID 'user123' can read their own investment 'investment456'.
     * @allow (create) User with ID 'user123' can create a new investment.
     * @allow (update) User with ID 'user123' can update their own investment 'investment456'.
     * @allow (delete) User with ID 'user123' can delete their own investment 'investment456'.
     * @deny (get) User with ID 'user456' cannot read an investment belonging to user 'user123'.
     * @deny (create) User with ID 'user456' cannot create an investment for user 'user123'.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /users/{userId}/investments/{investmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to transaction documents for a specific user.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (get) User with ID 'user123' can read their own transaction 'transaction456'.
     * @allow (create) User with ID 'user123' can create a new transaction.
     * @allow (update) User with ID 'user123' can update their own transaction 'transaction456'.
     * @allow (delete) User with ID 'user123' can delete their own transaction 'transaction456'.
     * @deny (get) User with ID 'user456' cannot read a transaction belonging to user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a transaction for user 'user123'.
     * @principle Enforces document ownership for all write operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to property documents.  Property data is publicly readable, but write access is not allowed.
     * @path /properties/{propertyId}
     * @allow (get) Any user can read any property.
     * @allow (list) Any user can list all properties.
     * @deny (create) No one can create a new property (no write permissions defined).
     * @deny (update) No one can update a property (no write permissions defined).
     * @deny (delete) No one can delete a property (no write permissions defined).
     * @principle Allows public read access to property listings.
     */
    match /properties/{propertyId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}