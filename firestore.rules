rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, list, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - If the user id does not match the authenticated user id.
     * @deny (get, list, update, delete) - If the user is not authenticated or the user id does not match the authenticated user id.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to investment documents for a specific user.
     * @path /users/{userId}/investments/{investmentId}
     * @allow (create, get, list, update, delete) - Authenticated user manages their own investments.
     * @deny (create, get, list, update, delete) - If the user is not authenticated or the user id does not match the authenticated user id.
     * @principle Enforces document ownership for reads and writes within a user's data tree.
     */
    match /users/{userId}/investments/{investmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }


      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to transaction documents for a specific user.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create, get, list, update, delete) - Authenticated user manages their own transactions.
     * @deny (create, get, list, update, delete) - If the user is not authenticated or the user id does not match the authenticated user id.
     * @principle Enforces document ownership for reads and writes within a user's data tree.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to property documents.
     * @path /properties/{propertyId}
     * @allow (get, list) - All users can read property information.
     * @deny (create, update, delete) - No client-side write access is allowed.
     * @principle Allows public read access with restricted write access.
     */
    match /properties/{propertyId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}