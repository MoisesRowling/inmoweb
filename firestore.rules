/**
 * @fileoverview Firestore Security Rules for the investment platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, investments, and transactions.
 * Only authenticated users can access their own data. Properties are publicly readable, but only the application backend
 * (which is not modeled in these rules) can modify them.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the authenticated user with matching UID.
 * - /users/{userId}/investments/{investmentId}: Stores investment data, accessible only to the owning user.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction history, accessible only to the owning user.
 * - /properties/{propertyId}: Stores property listings, publicly readable. Writes are not secured as they're assumed to be managed by a trusted backend.
 *
 * Key Security Decisions:
 * - Users can only access their own data (profile, investments, transactions).
 * - Listing of user documents is denied to prevent enumeration.
 * - Property data is publicly readable to allow browsing available investments. Writes to properties are not validated as they are assumed to be done by a secure backend.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data, ensuring only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID 'user_abc' can create their profile with id: 'user_abc'.
     * @allow (get, update, delete) - Authenticated user with UID 'user_abc' can get their profile at /users/user_abc.
     * @deny (create) - Authenticated user with UID 'user_abc' cannot create a profile with id: 'user_xyz'.
     * @deny (get, update, delete) - Authenticated user with UID 'user_xyz' cannot access /users/user_abc.
     * @deny (list) - Listing users is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures investment data, ensuring only the owning user can manage their investments.
     * @path /users/{userId}/investments/{investmentId}
     * @allow (create) - Authenticated user with UID 'user_abc' can create an investment under /users/user_abc/investments/{investmentId}.
     * @allow (get, list, update, delete) - Authenticated user with UID 'user_abc' can manage their investments under /users/user_abc/investments.
     * @deny (create, get, list, update, delete) - Authenticated user with UID 'user_xyz' cannot access investments under /users/user_abc.
     * @principle Restricts access to a user's own investment data.
     */
    match /users/{userId}/investments/{investmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures transaction data, ensuring only the owning user can view their transaction history.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - Authenticated user with UID 'user_abc' can create a transaction under /users/user_abc/transactions/{transactionId}.
     * @allow (get, list, update, delete) - Authenticated user with UID 'user_abc' can view their transaction history under /users/user_abc/transactions.
     * @deny (create, get, list, update, delete) - Authenticated user with UID 'user_xyz' cannot access transactions under /users/user_abc.
     * @principle Restricts access to a user's own transaction history.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to property listings. Writes are not secured as they are assumed to be managed by a trusted backend.
     * @path /properties/{propertyId}
     * @allow (get, list) - Any user (authenticated or not) can view property listings.
     * @deny (create, update, delete) - No user can create, update, or delete properties.
     * @principle Allows public read access to property listings.
     */
    match /properties/{propertyId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}