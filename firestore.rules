/**
 * @fileoverview Firestore Security Rules for the investment platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-related data
 * (profiles, account balances, investments, and transactions). Each user can only
 * access their own data. Property data is publicly readable but cannot be modified by clients.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/account_balance/{accountBalanceId}: Stores account balances.
 * - /users/{userId}/investments/{investmentId}: Stores investment data.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction history.
 * - /properties/{propertyId}: Stores property information.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user documents.
 * - Account balances, investments, and transactions are private to each user and can only be managed by them.
 * - Listing of user documents is disallowed to prevent data leakage.
 * - Property data is publicly readable but only writeable through backend processes (not secured here).
 *
 * Denormalization for Authorization:
 *  - The userId is used directly in the path for all user-owned documents, so no denormalization is needed. The `isOwner(userId)` function checks that the `request.auth.uid` matches the `userId` in the path.
 *
 * Structural Segregation:
 *  - User-specific data is stored under the /users/{userId} path, ensuring clear separation and access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can create their own document.
     * @allow (get) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can read their own document.
     * @allow (update) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can update their own document.
     * @allow (delete) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can delete their own document.
     * @deny (create) User with UID 'otherUserId' cannot create a document with userId 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @deny (get) User with UID 'otherUserId' cannot read the document of user 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @deny (update) User with UID 'otherUserId' cannot update the document of user 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @deny (delete) User with UID 'otherUserId' cannot delete the document of user 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user account balances.
     * @path /databases/{database}/documents/users/{userId}/account_balance/{accountBalanceId}
     * @allow (create) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can create their own account balance.
     * @allow (get) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can read their own account balance.
     * @allow (update) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can update their own account balance.
     * @allow (delete) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can delete their own account balance.
     * @deny (create) User with UID 'otherUserId' cannot create an account balance for user 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @deny (get) User with UID 'otherUserId' cannot read the account balance of user 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @deny (update) User with UID 'otherUserId' cannot update the account balance of user 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @deny (delete) User with UID 'otherUserId' cannot delete the account balance of user 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/account_balance/{accountBalanceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId && accountBalanceId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user investments.
     * @path /databases/{database}/documents/users/{userId}/investments/{investmentId}
     * @allow (create) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can create their own investment.
     * @allow (get) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can read their own investment.
     * @allow (update) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can update their own investment.
     * @allow (delete) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can delete their own investment.
     * @deny (create) User with UID 'otherUserId' cannot create an investment for user 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @deny (get) User with UID 'otherUserId' cannot read the investment of user 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @deny (update) User with UID 'otherUserId' cannot update the investment of user 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @deny (delete) User with UID 'otherUserId' cannot delete the investment of user 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/investments/{investmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user transaction history.
     * @path /databases/{database}/documents/users/{userId}/transactions/{transactionId}
     * @allow (create) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can create their own transaction.
     * @allow (get) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can read their own transaction.
     * @allow (update) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can update their own transaction.
     * @allow (delete) User with UID 'x2SsGONwFMajl8AQmw7IHdspyWw1' can delete their own transaction.
     * @deny (create) User with UID 'otherUserId' cannot create a transaction for user 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @deny (get) User with UID 'otherUserId' cannot read the transaction of user 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @deny (update) User with UID 'otherUserId' cannot update the transaction of user 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @deny (delete) User with UID 'otherUserId' cannot delete the transaction of user 'x2SsGONwFMajl8AQmw7IHdspyWw1'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to property information. Publicly readable.
     * @path /databases/{database}/documents/properties/{propertyId}
     * @allow (get) Any user can read property information.
     * @allow (list) Any user can list property information.
     * @deny (create) No user can create property documents.
     * @deny (update) No user can update property documents.
     * @deny (delete) No user can delete property documents.
     * @principle Allows public read access but restricts write access.
     */
    match /properties/{propertyId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}