/**
 * @fileoverview Firestore Security Rules for the investment platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, account balances, investments, and transactions.
 * Properties are publicly readable but not writable by clients.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user.
 * - /users/{userId}/account_balance/{accountBalanceId}: Stores account balance data, accessible only by the user.
 * - /users/{userId}/investments/{investmentId}: Stores investment data, accessible only by the user.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction history, accessible only by the user.
 * - /properties/{propertyId}: Stores property information, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Properties are publicly readable but can only be managed by backend processes (no client writes).
 * - Listing of users is not allowed.
 * - Account Balance ID must match the User ID for data consistency.
 *
 * Denormalization for Authorization:
 *  - The User ID is present both in the path (/users/{userId}) and as a field within the documents in the user's subcollections (e.g., investments, transactions).
 *    This allows for efficient authorization checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the user to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can create their profile if request.auth.uid == userId AND request.resource.data.id == userId.
     * @allow (get) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can read their profile if request.auth.uid == userId.
     * @allow (update) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can update their profile if request.auth.uid == userId.
     * @allow (delete) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can delete their profile if request.auth.uid == userId.
     * @deny (create) - User 'otherUser' cannot create a profile for user '4h2gcWG8hhMf2VHoqntOIU0fMls2'.
     * @deny (get) - User 'otherUser' cannot read user '4h2gcWG8hhMf2VHoqntOIU0fMls2' profile.
     * @deny (update) - User 'otherUser' cannot update user '4h2gcWG8hhMf2VHoqntOIU0fMls2' profile.
     * @deny (delete) - User 'otherUser' cannot delete user '4h2gcWG8hhMf2VHoqntOIU0fMls2' profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      /**
       * @description Secures account balance data, allowing only the user to read and write their own account balance.
       * @path /users/{userId}/account_balance/{accountBalanceId}
       * @allow (create) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can create their account balance if request.auth.uid == userId AND request.resource.data.userId == userId AND accountBalanceId == userId.
       * @allow (get) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can read their account balance if request.auth.uid == userId.
       * @allow (update) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can update their account balance if request.auth.uid == userId AND resource.data.userId == userId AND accountBalanceId == userId.
       * @allow (delete) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can delete their account balance if request.auth.uid == userId AND accountBalanceId == userId.
       * @deny (create) - User 'otherUser' cannot create an account balance for user '4h2gcWG8hhMf2VHoqntOIU0fMls2'.
       * @deny (get) - User 'otherUser' cannot read user '4h2gcWG8hhMf2VHoqntOIU0fMls2' account balance.
       * @deny (update) - User 'otherUser' cannot update user '4h2gcWG8hhMf2VHoqntOIU0fMls2' account balance.
       * @deny (delete) - User 'otherUser' cannot delete user '4h2gcWG8hhMf2VHoqntOIU0fMls2' account balance.
       * @principle Enforces document ownership and account ID consistency for all operations on account balances.
       */
      match /account_balance/{accountBalanceId} {
        allow get: if isOwner(userId) && accountBalanceId == userId;
        allow list: if isOwner(userId) && accountBalanceId == userId;
        allow create: if isOwner(userId) && request.resource.data.userId == userId && accountBalanceId == userId;
        allow update: if isOwner(userId) && resource.data.userId == userId && accountBalanceId == userId;
        allow delete: if isExistingOwner(userId) && accountBalanceId == userId;

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }
      }

      /**
       * @description Secures investment data, allowing only the user to read and write their own investments.
       * @path /users/{userId}/investments/{investmentId}
       * @allow (create) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can create their investment if request.auth.uid == userId AND request.resource.data.userId == userId.
       * @allow (get) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can read their investment if request.auth.uid == userId.
       * @allow (update) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can update their investment if request.auth.uid == userId AND resource.data.userId == userId.
       * @allow (delete) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can delete their investment if request.auth.uid == userId.
       * @deny (create) - User 'otherUser' cannot create an investment for user '4h2gcWG8hhMf2VHoqntOIU0fMls2'.
       * @deny (get) - User 'otherUser' cannot read user '4h2gcWG8hhMf2VHoqntOIU0fMls2' investment.
       * @deny (update) - User 'otherUser' cannot update user '4h2gcWG8hhMf2VHoqntOIU0fMls2' investment.
       * @deny (delete) - User 'otherUser' cannot delete user '4h2gcWG8hhMf2VHoqntOIU0fMls2' investment.
       * @principle Enforces document ownership for all operations on investments.
       */
      match /investments/{investmentId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isOwner(userId) && resource.data.userId == userId;
        allow delete: if isExistingOwner(userId);

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }
      }

      /**
       * @description Secures transaction history, allowing only the user to read and write their own transactions.
       * @path /users/{userId}/transactions/{transactionId}
       * @allow (create) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can create a transaction if request.auth.uid == userId AND request.resource.data.userId == userId.
       * @allow (get) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can read their transaction if request.auth.uid == userId.
       * @allow (update) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can update their transaction if request.auth.uid == userId AND resource.data.userId == userId.
       * @allow (delete) - User '4h2gcWG8hhMf2VHoqntOIU0fMls2' can delete their transaction if request.auth.uid == userId.
       * @deny (create) - User 'otherUser' cannot create a transaction for user '4h2gcWG8hhMf2VHoqntOIU0fMls2'.
       * @deny (get) - User 'otherUser' cannot read user '4h2gcWG8hhMf2VHoqntOIU0fMls2' transaction.
       * @deny (update) - User 'otherUser' cannot update user '4h2gcWG8hhMf2VHoqntOIU0fMls2' transaction.
       * @deny (delete) - User 'otherUser' cannot delete user '4h2gcWG8hhMf2VHoqntOIU0fMls2' transaction.
       * @principle Enforces document ownership for all operations on transactions.
       */
      match /transactions/{transactionId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isOwner(userId) && resource.data.userId == userId;
        allow delete: if isExistingOwner(userId);

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }
      }
    }

    /**
     * @description Allows public read access to property information.  Writes are disallowed from the client.
     * @path /properties/{propertyId}
     * @allow (get) - Any user can read property information.
     * @allow (list) - Any user can list properties.
     * @deny (create) - No user can create property information.
     * @deny (update) - No user can update property information.
     * @deny (delete) - No user can delete property information.
     * @principle Public read access with no client write access.
     */
    match /properties/{propertyId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}