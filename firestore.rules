/**
 * @description This ruleset enforces a strict user-ownership model for investments and transactions, while allowing public read access to property listings.
 * @dataStructure
 * - /properties/{propertyId}: Publicly accessible property listings.
 * - /investments/{userId}/userInvestments/{investmentId}: User-owned investment data.
 * - /transactions/{userId}/userTransactions/{transactionId}: User-owned transaction history.
 * @keySecurityDecisions
 * - Property listings are publicly readable but only modifiable with appropriate authorization (currently disabled in prototyping).
 * - User investment and transaction data is strictly owned by the user.
 * - Listing of user investments is allowed for the owner.
 * - Listing of user transactions is allowed for the owner.
 * @denormalizationForAuthorization N/A
 * @structuralSegregation Investment and Transaction data are stored in user-specific subcollections for secure access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to property listings. Write access is currently disabled.
     * @path /properties/{propertyId}
     * @allow (get, list) Any user can read property listings.
     * @deny (create, update, delete) No user can create, update, or delete property listings without proper authorization.
     * @principle Allows public access with the intention of adding role-based authorization for creating and managing properties later.
     */
    match /properties/{propertyId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for investments. Only the user who owns the investment can read, create, update, or delete it.
     * @path /investments/{userId}/userInvestments/{investmentId}
     * @allow (get, create, update, delete, list) Only the user with the matching userId can perform these operations.
     * @deny (get, create, update, delete, list) Any other user attempting to perform these operations will be denied.
     * @principle Enforces document ownership for all operations.
     */
    match /investments/{userId}/userInvestments/{investmentId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for transactions. Only the user who owns the transaction can read, create, update, or delete it.
     * @path /transactions/{userId}/userTransactions/{transactionId}
     * @allow (get, create, update, delete, list) Only the user with the matching userId can perform these operations.
     * @deny (get, create, update, delete, list) Any other user attempting to perform these operations will be denied.
     * @principle Enforces document ownership for all operations.
     */
    match /transactions/{userId}/userTransactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Helper function to check if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Helper function to check if the user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Helper function to check if the user ID matches the authenticated user's ID and the resource exists.
     */
    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}