/**
 * @description This ruleset enforces a strict user-ownership model for investments and transactions, while allowing public read access to property listings.
 * @dataStructure
 *  - /properties/{propertyId}: Publicly readable property listings.
 *  - /investments/{userId}/userInvestments/{investmentId}: Investments owned by a specific user.
 *  - /transactions/{userId}/userTransactions/{transactionId}: Transactions associated with a specific user.
 * @keySecurityDecisions
 *  - Users can only manage their own investments and transactions.
 *  - Property listings are publicly readable but not writable through the client.
 *  - Listing of investments is restricted to the owning user to protect privacy.
 * @denormalizationForAuthorization
 *  - Investment documents include the userId to simplify ownership checks without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to property listings. Write access is denied to the client.
     * @path /properties/{propertyId}
     * @allow (get, list) Allow any user (signed in or not) to read property details.
     * @deny (create, update, delete) Prevent any client-side creation, modification, or deletion of properties.
     * @principle Properties are considered public read-only data.
     */
    match /properties/{propertyId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for investments. Only the user can create, read, update, or delete their investments.
     * @path /investments/{userId}/userInvestments/{investmentId}
     * @allow (create) Allow a user to create an investment if the userId matches their auth.uid.
     * @allow (get, list) Allow a user to read their own investments.
     * @allow (update) Allow a user to update their existing investment if the userId matches their auth.uid and the document exists.
     * @allow (delete) Allow a user to delete their existing investment if the userId matches their auth.uid and the document exists.
     * @deny (create) Deny a user from creating an investment for another user.
     * @deny (update, delete) Deny a user from updating or deleting an investment that doesn't exist.
     * @principle Enforces document ownership for writes.
     */
    match /investments/{userId}/userInvestments/{investmentId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for transactions. Only the user can create, read, update, or delete their transactions.
     * @path /transactions/{userId}/userTransactions/{transactionId}
     * @allow (create) Allow a user to create a transaction if the userId matches their auth.uid.
     * @allow (get, list) Allow a user to read their own transactions.
     * @allow (update) Allow a user to update their existing transaction if the userId matches their auth.uid and the document exists.
     * @allow (delete) Allow a user to delete their existing transaction if the userId matches their auth.uid and the document exists.
     * @deny (create) Deny a user from creating a transaction for another user.
     * @deny (update, delete) Deny a user from updating or deleting a transaction that doesn't exist.
     * @principle Enforces document ownership for writes.
     */
    match /transactions/{userId}/userTransactions/{transactionId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}