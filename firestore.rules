/**
 * @fileoverview Firestore Security Rules for the investment platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only
 * access their own data. Public read access is granted to the 'properties' collection.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /properties/{propertyId}: Publicly readable information about investment properties.
 * - /transactions/{userId}/userTransactions/{transactionId}: User-specific transactions, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - Users can only list their own transactions, but cannot list all users.
 * - The 'properties' collection is publicly readable, but only writeable by backend processes (not covered by these rules).
 * - Default security posture for ambiguous relationships is owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - If the user's ID matches the document ID.
     * @allow (get, list, update, delete) - If the user is the owner of the document.
     * @deny (create) - If the user's ID does not match the document ID.
     * @deny (get, list, update, delete) - If the user is not the owner of the document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Validate that the authenticated user's ID matches the userId in the path.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      // Only allow creating a user document if the authenticated user's ID matches the document ID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      // Only allow reading, updating, and deleting if the user is the owner.
      allow get, list, update, delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Grants public read access to investment property documents.
     * @path /properties/{propertyId}
     * @allow (get, list) - All users can read property information.
     * @deny (create, update, delete) - No client-side writes allowed.
     * @principle Allows public read access to property information.
     */
    match /properties/{propertyId} {
      // Allow anyone to read the property information.
      allow get, list: if true;
      // No client-side writes are allowed.
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to user-specific transaction documents.
     * @path /transactions/{userId}/userTransactions/{transactionId}
     * @allow (create) - If the user is the owner.
     * @allow (get, list, update, delete) - If the user is the owner.
     * @deny (create) - If the user is not the owner.
     * @deny (get, list, update, delete) - If the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /transactions/{userId}/userTransactions/{transactionId} {
      // Validate that the authenticated user's ID matches the userId in the path.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      // Only allow creating a transaction document if the authenticated user is the owner.
      allow create: if isOwner(userId);
      // Only allow reading, updating, and deleting if the user is the owner and the resource exists.
      allow get, list, update, delete: if isOwner(userId) && resource != null;
    }
  }
}