/**
 * @fileoverview Firestore Security Rules for the investment platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, investments, and transactions, ensuring that users can only access their own data. Public read access is granted to the /properties collection, but write access is not granted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/investments/{investmentId}: Stores investment data for each user.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction history for each user.
 * - /properties/{propertyId}: Stores information about investment properties.
 *
 * Key Security Decisions:
 * - Users can only read, create, update, and delete their own user documents and associated investments/transactions.
 * - Public read access is granted for the /properties collection.
 * - No user listing is allowed at the root level.
 *
 * Denormalization for Authorization:
 * The `userId` is included in both the investment and transaction documents to allow for fast, simple ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) Signed-in user can get, update, and delete their own profile if the userId matches their auth UID.
     * @deny (create) User cannot create a profile with a userId that doesn't match their auth UID.
     * @deny (get, update, delete) User cannot get, update, or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for user investments.
     * @path /users/{userId}/investments/{investmentId}
     * @allow (create, get, list, update, delete) Signed-in user can manage their own investments.
     * @deny (create, get, list, update, delete) User cannot manage another user's investments.
     * @principle Restricts access to a user's own investments.
     */
    match /users/{userId}/investments/{investmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for user transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create, get, list, update, delete) Signed-in user can manage their own transactions.
     * @deny (create, get, list, update, delete) User cannot manage another user's transactions.
     * @principle Restricts access to a user's own transactions.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to property listings, but restricts write access.
     * @path /properties/{propertyId}
     * @allow (get, list) Anyone can view property listings.
     * @deny (create, update, delete) Only authenticated users can create, update or delete properties.
     * @principle Allows public read access while restricting write access.
     */
    match /properties/{propertyId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}